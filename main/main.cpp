/* Edge Impulse Espressif ESP32 Standalone Inference ESP IDF Example
 * Copyright (c) 2022 EdgeImpulse Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Include ----------------------------------------------------------------- */
#include <stdio.h>

#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

#include "driver/gpio.h"
#include "sdkconfig.h"

#define LED_PIN GPIO_NUM_21

static const float features[] = {
    -0.0788, -0.5645, 0.2443, -1.8048, 0.2335, -0.2943, -0.1549, 0.4651, -0.2156, -1.7278, -0.1232, 0.1379, -0.0158, -0.4070, 0.1994, -1.2418, 0.5944, -0.1777, -0.1536, 0.4175, -0.0196, -0.7235, 0.0820, 0.0193, -0.1422, -0.5756, 0.2767, -1.7336, 0.3928, 0.0916, 0.0579, 0.2831, -0.2637, -0.9077, -0.1452, 0.0822, -0.3782, -0.5287, 0.3899, -1.1340, 0.4670, -0.0042, -0.6343, 0.3912, 0.0175, -0.3515, -0.2722, 0.0887, -1.3722, -0.5229, 0.3917, -0.1414, 1.0747, 0.1496, -2.0117, 0.6581, 0.0881, -0.5931, -0.4461, 0.2429, -0.0743, 0.6970, -0.2543, -3.0246, 0.3505, 0.3044, 0.1238, -0.4766, 0.3118, -2.7048, -0.3408, 0.3690, -0.1807, 0.7793, 0.0036, -3.1869, 0.6657, 0.8189, 0.1465, -0.4219, 0.2126, -2.7055, -0.4668, 0.2189, 0.0646, 0.7835, -0.1122, -3.0880, 0.3170, 0.8950, 0.2177, -0.4416, 0.1752, -2.5667, -0.5376, -0.2162, 0.2154, 0.8325, -0.1530, -1.1378, -0.1770, 0.2769, -0.0834, -0.5797, 0.2340, -1.3604, 0.5886, 0.0942, 0.1302, 0.2934, -0.2235, -1.6106, 0.2485, -0.0770, 0.2380, -0.6231, 0.2847, -0.9032, 0.6764, 0.1120, -0.6239, 0.3469, -0.2415, -0.4218, -0.3306, 0.2020, -0.4074, -0.4876, 0.2186, -1.2219, 0.8386, -0.0533, 0.0785, 0.3807, -0.0483, -0.5807, -0.1740, 0.1730, -0.3059, -0.6332, 0.2522, -0.6941, 0.8259, 0.0075, -0.9112, 0.4309, -0.0441, -0.4606, -0.0689, 0.2296, -2.4919, -0.2006, 0.6126, 0.0402, 0.5819, -0.2790, -2.9901, 0.9129, 0.5972, 0.0304, -0.4842, 0.1413, -2.4791, -0.1418, -0.0067, 0.2151, 0.5987, -0.1120, -2.2099, 0.2557, 0.3422, 0.0261, -0.5710, 0.1451, -1.9349, 0.4069, 0.1329, 0.0936, 0.3942, -0.2241, -1.9482, 0.0801, 0.3654, -0.0106, -0.6771, 0.2511, -2.1614, 0.1673, 0.0424, 0.1978, 0.7032, -0.1711, -0.9893, -0.0730, 0.3234, -0.0495, -0.4825, 0.1567, -1.9566, 0.0776, -0.1213, -0.1554, -0.2953, 0.2668, -0.4571, 0.7725, -0.0729, -1.7725, 0.8885, -0.3289, -0.4342, -0.1174, 0.1934, -1.4079, -0.4692, 0.2646, -0.4306, 0.6926, -0.0415, -1.7610, 0.9852, 0.1395, -0.3456, -0.2071, 0.1929, -1.5571, -0.4854, 0.3523, -0.1913, 0.8864, -0.1067, -2.3808, 0.5715, 0.0433, -0.2287, -0.3075, 0.2513, -2.4086, -0.7275, -0.1497, 0.1045, 0.6280, -0.1633, -2.7199, 0.0903, 0.3211, 0.0943, -0.5158, 0.3813, -2.6416, -0.6718, -0.1566, 0.0476, 0.6063, -0.1015, -2.6736, 0.1541, 0.2343, -0.0012, -0.2955, 0.4263, -2.5101, -0.6272, -0.1470, -0.0963, 0.7298, -0.0970, -2.2996, 0.3293, 0.2951, 0.0670, -0.4689, 0.2292, -2.2243, 0.0150, -0.2032, 0.0167, 1.0001, -0.0605, -2.8489, 0.3432, 0.5367, 0.1023, -0.4807, 0.1916, -2.0449, -0.0417, -0.0465, -0.2139, 0.8102, -0.1897, -2.9320, -0.2956, 0.6140, 0.0559, -0.4389, 0.1929, -2.2171, -0.2641, -0.2886, 0.1016, 0.6668, -0.1390, -1.8726, -0.0861, 0.4833, 0.0523, -0.4987, 0.1639, -2.6815, 0.0964, -0.3016, 0.1459, 0.6105, -0.1274, -1.6392, 0.1481, 0.3762, -0.1670, -0.6967, 0.2484, -1.9389, 0.3154, 0.0285, 0.2920, 0.5009, -0.2275, -1.7646, -0.0325, 0.3272, 0.1100, -0.3606, 0.3530, -1.5435, 0.3871, 0.1575, 0.2792, 0.6872, -0.1188, -1.3614, 0.0598, 0.3952, 0.0980, -0.5869, 0.1923, -1.1502, 0.6432, 0.0764, 0.0014, 0.3796, -0.4371, -0.1354, -0.5979, 0.2159, -0.7893, 0.7309, 0.0935, -0.7401, 0.2867, -0.1225, -0.4561, -0.1568, 0.1971, -1.2706, -0.7706, 0.8288, -0.1350, 0.7959, 0.0168, -0.4844, 0.3387, -0.2995, -0.6543, -0.1649, 0.1345, -0.5939, -0.4366, 0.4113, -0.5534, 0.7971, -0.2162, -0.5548, 0.5118, -0.0561, -0.6285, -0.1334, 0.1380, -0.8408, -0.5210, 0.7078, -0.2633, 0.8002, -0.1088, -3.1505, 0.9226, 0.5065, 0.0358, -0.4238, 0.2225, -2.6121, -0.0379, 0.5287, 0.1013, 0.5537, -0.2867, -2.5294, 0.0077, 0.2103, 0.2571, -0.6074, 0.2983, -2.6149, -0.1675, 0.0504, 0.0910, 0.6455, -0.1370, -2.8937, 0.4009, 0.6915, 0.2321, -0.5562, 0.2668, -2.9367, -0.1321, 0.2065, 0.1884, 0.4138, -0.2100, -2.7862, 0.3880, 1.0018, 0.3210, -0.5404, 0.0648, -1.7358, 0.1705, -0.0574, 0.0617, 0.6639, -0.2921, -1.9134, 0.1765, 0.5501, 0.0586, -0.6861, 0.1820, -1.3950, 0.4056, -0.0218, 0.2266, 0.5364, -0.1875, -2.6588, 0.1568, 0.5384, -0.1459, -0.5747, 0.2387, -1.4843, 0.4318, 0.1694, 0.0512, 0.3997, -0.2586, -0.9973, -0.0196, 0.2475, -0.0929, -0.6100, 0.2711, -1.1392, 0.4913, 0.2027, -0.2015, 0.3409, 0.0156, -0.8056, -0.1308, 0.1342, -0.2630, -0.4943, 0.2799, -1.8249, 0.1650, 0.0471, 0.1707, 0.3621, -0.1243, -2.4588, 0.3598, 0.0573, -0.0183, -0.5023, 0.1817, 0.0076, 0.4008, -0.4278, 0.3019, -0.3934, 0.2994, -1.7503, 0.1574, -0.2675, 0.1412, 0.5098, -0.0947, -2.8782, 0.4703, 0.9146, 0.3408, -0.6193, 0.1696, -2.5231, -0.0862, -0.2104, 0.0370, 0.6419, -0.2763, -3.1806, 0.2587, 1.2816, 0.1286, -0.6313, 0.1024, -2.1605, -0.0053, 0.0740, 0.1130, 0.5169, -0.2154, -3.4690, 0.6449, 0.9526, 0.4468, -0.6767, -0.0916, -3.3862, 0.4217, 0.9221, 0.1233, 0.5372, -0.2893, -3.5450, 0.5614, 0.9519, 0.3415, -0.4849, -0.0064, -3.1250, 0.3533, 0.3411, -0.3614, 0.5275, -0.2734, -3.1704, 0.4738, 0.4766, -0.0123, -0.7625, 0.0405, -3.3041, -0.0186, 0.0778, 0.1705, 0.6290, -0.2415, -3.5848, 0.5538, 0.5999, 0.1811, -0.4233, -0.1072, -2.5200, 0.0880, -0.1243, -0.2450, 0.5075, -0.1691, -2.8670, 0.2057, 0.2789, 0.2340, -0.7254, 0.0278, -2.4354, -0.1750, -0.5967, 0.2258, 0.9022, -0.1178, -2.6703, -0.5220, 0.0892, 0.3584, -0.7116, 0.3221, -3.0226, -0.0032, 0.2589, 0.1850, 0.5345, -0.1942, -1.8968, -0.2378, 0.0455, 0.2104, -0.5055, 0.2684, -1.8854, 0.2378, -0.5801, 0.3851, 0.5337, 0.0042, -1.9029, -0.0998, 0.1055, 0.1438, -0.5492, 0.4453, -1.7495, 0.2241, -0.2528, 0.2560, 0.3679, -0.0654, -2.1337, 0.1519, 0.3760, 0.0631, -0.5455, 0.3823, -2.5575, 0.2272, -0.0862, 0.3075, 0.5134, -0.1063, -2.8907, 0.0249, 0.4472, 0.3890, -0.5890, 0.2950, 0.2327, 0.3966, -0.0836, -1.1095, -0.1333, 0.0284, -0.3301, -0.6688, 0.4867, -1.0348, 0.7178, 0.1118, -0.4356, 0.2725, -0.3035, -1.0190, -0.3133, -0.1134, 0.0384, -0.6201, 0.0573, -1.4243, 0.3496, -0.2187, -0.4412, 0.4322, -0.1837, -0.6823, -0.4091, 0.1774, -0.1723, -0.4769, 0.2562, -0.6649, 0.7707, -0.0699, 0.1889, 0.4321, -0.1919, -1.0230, -0.3113, 0.1810, -0.2733, -0.5629, 0.3374, -1.2729, 0.6762, -0.0604, -1.0897, 0.6594, 0.3964, -0.5926, -0.4053, 0.2802, -0.2133, -0.4967, -0.0565, -0.6241, 0.5754, -0.0061, -0.5642, 0.5389, 0.1194, -0.5407, -0.0420, 0.1809, -0.8862, 0.3681, -1.2601, 0.0092, 0.4340, -0.2477, -0.2799, 0.7910, -1.5933, 0.2977, -0.3364, -0.1337, 0.2676, -0.4446, -1.6411, -0.1627, 0.5117, -0.3237, -1.4823, 0.6589, -1.7555, 0.3666, -0.5501, -0.5565, -0.9603, 1.0172, -2.0545, 0.2838, 0.3307, 0.3021, -1.0729, 1.8128, -0.7669, 0.1148, -0.6251, -0.2961, -0.1761, 1.1628, -1.8502, -0.0440, -0.0865, 0.3900, -1.1264, 1.2618, -1.0648, -0.1525, -0.6370, 0.3017, -0.7647, 1.3085, -1.2545, -0.2251, 0.2526, 0.0857, -0.8650, 0.6697, -0.8683, -0.3788, 0.0071, -0.6437, 0.0861, 0.8470, -0.0649, -0.0721, 0.1815, -0.4384, -0.5013, -0.1075, -0.8109, -0.6916, -0.4592, 0.3795, -1.5370, 0.7292, -0.0591, 0.2623, 0.3896, -0.0953, -1.5030, -0.2298, 0.0572, -0.4604, 0.9054, -0.0827, -0.6959, 0.3679, -0.0878, -0.6018, -0.4251, 0.0591, -0.3233, -0.3390, -0.1402, -0.3904, 0.6357, -0.0007, -0.0896, 0.4125, -0.0019, -0.2094, -0.4244, 0.0930, -0.3935, -0.5141, 0.2874, -0.8061, 0.9429, 0.0085, -0.2122, 0.4754, -0.0953, -0.9025, -0.4156, 0.1417, -0.3060, -0.3395, 0.2760, -0.6002, 0.8493, -0.0945, -1.0143, 0.3972, -0.3782, -0.0907, -0.4570, 0.0770, -0.4301, -0.4556, 0.0335, 0.0921, 0.6904, -0.2472, -2.6901, 1.6160, 1.1713, 0.0430, -0.5834, 0.0877, -0.5999, -0.4921, 0.1594, -0.4788, 0.5576, -0.0193, -0.3285, 0.6477, -0.0457, -0.6576, -0.3393, 0.2261, 0.1599, -0.4126, 0.0473, -0.5553, 0.6445, -0.0638, -0.9788, 0.8673, -0.2349, -0.0293, -0.4884, 0.1821, -1.3795, -0.3440, -0.1985, -0.0379, 0.9286, -0.1443, -1.6552, 1.3428, 0.0064, 0.0148, -0.4504, -0.0342, -3.3820, 0.1512, -0.1040, 0.0856, 0.9573, -0.1200, -3.3720, 0.9923, 0.8993, 0.0515, -0.7512, -0.0833, -3.1933, 0.6479, -0.2428
    // copy raw features here (for example from the 'Live classification' page)
};

int raw_feature_get_data(size_t offset, size_t length, float *out_ptr)
{
  memcpy(out_ptr, features + offset, length * sizeof(float));
  return 0;
}

void print_inference_result(ei_impulse_result_t result) {

    // Print how long it took to perform inference
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
            result.timing.dsp,
            result.timing.classification,
            result.timing.anomaly);

    // Print the prediction results (object detection)
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    ei_printf("Object detection bounding boxes:\r\n");
    for (uint32_t i = 0; i < result.bounding_boxes_count; i++) {
        ei_impulse_result_bounding_box_t bb = result.bounding_boxes[i];
        if (bb.value == 0) {
            continue;
        }
        ei_printf("  %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\r\n",
                bb.label,
                bb.value,
                bb.x,
                bb.y,
                bb.width,
                bb.height);
    }

    // Print the prediction results (classification)
#else
    ei_printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
        ei_printf("%.5f\r\n", result.classification[i].value);
    }
#endif

    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

}

extern "C" int app_main()
{
    gpio_pad_select_gpio(LED_PIN);
    gpio_reset_pin(LED_PIN);

    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);

    ei_sleep(100);

    ei_impulse_result_t result = { nullptr };

    ei_printf("Edge Impulse standalone inferencing (Espressif ESP32)\n");

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE)
    {
        ei_printf("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
        return 1;
    }

    while (true)
    {
        // blink LED
        gpio_set_level(LED_PIN, 1);

        // the features are stored into flash, and we don't want to load everything into RAM
        signal_t features_signal;
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
        features_signal.get_data = &raw_feature_get_data;

        // invoke the impulse
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false /* debug */);
        if (res != EI_IMPULSE_OK) {
            ei_printf("ERR: Failed to run classifier (%d)\n", res);
            return res;
        }

        print_inference_result(result);

        gpio_set_level(LED_PIN, 0);
        ei_sleep(1000);
    }
}

